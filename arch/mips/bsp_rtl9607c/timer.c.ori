/*
 * Realtek Semiconductor Corp.
 *
 * bsp/timer.c
 *     bsp timer initialization code
 *
 * Copyright (C) 2006-2012 Tony Wu (tonywu@realtek.com)
 */
#include <linux/version.h>
#include <linux/errno.h>
#include <linux/init.h>
#include <linux/sched.h>
#include <linux/kernel.h>
#include <linux/param.h>
#include <linux/string.h>
#include <linux/mm.h>
#include <linux/interrupt.h>
#include <linux/timex.h>
#include <linux/delay.h>
#include <asm/io.h>
#include <asm/setup.h>
#include <asm/irq.h>
#include <asm/time.h>
#include "bspchip.h"

#ifdef CONFIG_CEVT_EXT
extern int ext_clockevent_init(void);
#endif


static int rtk_watchdog_default_func(void)
{
	return 0;
}

int (*rtk_watchdog_kick_func)(void) = rtk_watchdog_default_func;

EXPORT_SYMBOL(rtk_watchdog_kick_func);

void  bsp_timer_ack(void)
{
  	unsigned int offset = smp_processor_id() * 0x10;
	{
    	    REG32(APOLLOPRO_TC0INT + offset) |= APOLLOPRO_TCIP;
	}
	rtk_watchdog_kick_func();
}

/***************************************************
 * RTL not use MIPS R4K Clock event, this function
 * is for test or debug purpose.
 **************************************************/
#if defined(CONFIG_CEVT_R4K)
static void mips_timer_dispatch(void)
{
	do_IRQ(BSP_COMPARE_IRQ);
}

unsigned int __init get_c0_compare_int(void)
{
#ifdef CONFIG_CPU_MIPSR2_IRQ_VI	
        if (cpu_has_vint)
	      set_vi_handler(BSP_COMPARE_IRQ, mips_timer_dispatch);
#endif
	return BSP_COMPARE_IRQ;
}

#endif

static void __init bsp_ext_time_init_all(void){
	int i, offset;
        int TCDATA = 0;
	int TCCTL = 0;
	TCDATA = ( (MHZ * 1000000)/ ((int) DIVISOR_APOLLOPRO * HZ) );
  	for(i=0; i<NR_CPUS && i<TC_MAX; i++){
	    offset = i*0x10;
	    if (REG32(APOLLOPRO_TC0INT + offset) & APOLLOPRO_TCIP){
	        REG32(APOLLOPRO_TC0INT + offset) |= APOLLOPRO_TCIP;
	    }
            /* disable timer before setting CDBR */
       	    REG32(APOLLOPRO_TC0CTL + offset) = 0; /* disable timer before setting CDBR */
	    REG32(APOLLOPRO_TC0DATA + offset ) =  TCDATA;       	    
	}
        /* Enable timer for all CPU at one time. Let the count of all timer is near */
	TCCTL = APOLLOPRO_TCEN | APOLLOPRO_TCMODE_TIMER | DIVISOR_APOLLOPRO ;
        for(i=0; i<NR_CPUS && i<TC_MAX; i++){
	   offset = i*0x10;
	   REG32(APOLLOPRO_TC0CTL+ offset) = TCCTL;
	}
	
}

static void __init bsp_timer_all(void){
	bsp_ext_time_init_all();
	/* hook up timer interrupt handler on CPU0 for TC0
	 * CPU1~CPU3 need do this by itself
	 */
    	ext_clockevent_init();
 	REG32(APOLLOPRO_TC0INT) = APOLLOPRO_TCIE;
}

void __init plat_time_init(void)
{
#if defined(CONFIG_CEVT_EXT)
                bsp_timer_all();
#elif defined(CONFIG_CEVT_R4K)
		/* set cp0_compare_irq and cp0_perfcount_irq */
		cp0_compare_irq = BSP_COMPARE_IRQ;
		cp0_perfcount_irq = BSP_PERFCOUNT_IRQ;

		mips_hpt_frequency = BSP_CPU0_FREQ / 2;
		
		write_c0_count(0);
#endif

    return;
}

